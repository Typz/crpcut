The support for google-mock <http://code.google.com/p/googlemock> is still
considered experimental.

Building
========

google-mock support is not enabled by default in part due to its experimental
nature, and in part because not all have, or desire to use, google-mock.
google-mock support can be enabled with extra parameter(s) to cmake (see
INSTALL for the basics.)

-DWITH_GOGGLE_MOCK=yes

Cause cmake to search for a google-mock installation. It assumes that the
header and library files are reachable through the compiler- and linker-
defaults.

-DGOOGLE_MOCK_DIR=<path>

Only useful together with -DGOOGLE_MOCK=yes. Explicitly points out the google-
mock headers and libs to reside under <path> (the exact same path used with
--prefix=<path> to google-mock's ./configure.)

Using
=====

#include <gmock/gmock.h> // The order is important. Always gmock/gmock.h
#include <crpcut.hpp>    // before crpcut.hpp. crpcut redefines some macros.

There's an important difference when running google-mock under crpcut compared
to running under google-test. crpcut is very heavy-handed. Violations are
always greeted with immediate termination. See also the BUGS document.

google-mock interacts very nicely with crpcut fixtures. Here's an example of
letting several test cases use the same mocks, in different sequences.

#include <gmock/gmock.h>
#include <crpcut.hpp>

struct iface1 {
  virtual void f1(int) = 0;
};

struct iface2 {
  virtual void f1(const char *) = 0;
};

struct mock1 : iface1 {
  MOCK_METHOD1(f1, void(int));
};

struct mock2 : iface2 {
  MOCK_METHOD1(f1, void(const char*));
};

struct fix_base {
  mock1 m1;
  mock2 m2;
};

class fix_seq1 : public fix_base {
public:
  fix_seq1() {
    EXPECT_CALL(m1, f1(3)).InSequence(s);
    EXPECT_CALL(m2, "hello").InSequence(s);
  }
private:
  testing::sequence s; // can't do much more with this one
};

class fix_seq2 : public fix_base {
public:
  fix_seq2() {
    EXPECT_CALL(m1, f1(3)).InSequence(s1, s2);
    EXPECT_CALL(m1, f1(4)).InSequence(s1);
  }
  testing::sequence s1; // open-ended, for test-cases
  testing::sequence s2; // to add more to the sequences
};

TEST(t1, fix_seq1)
{
  ... // do things with m1 and m2
}

TEST(t2, fix_seq2)
{
  // add more to the started sequence
  EXPECT_CALL(m2, f("hello")).InSequence(s2);

  ... // do things with m1 and m2
}

TEST(t3, fix_seq2)
{
  // add other things to the started sequence
  EXPECT_CALL(m2, f("world")).InSequence(s2);

  ... // do things with m1 and m2
}
