1. Q: Isn't it slow to run tests in separate processes?
   A: Not really. The overhead is very low. Often tests take much less than a
      millisecond to run. You have to have a very long testsuite for those
      numbers to add up to anything worth bothering with. Also, if you have
      test cases that take a long time to complete, and a multi-core CPU,
      you can shorten the time to run a test suite by running several test
      cases in parallel.

2. Q: Why can't I let tests share a common state?
   A: Because if one test fails, you want to know that it is the failing
      test case that did something wrong, not some other test case that messed
      up the premises.

3. Q: Why no support for parametrized tests?
   A: It's extremely easy to construct with inheritance. Here's an example.

      class parameter_base
      {
      protected:
          template <typename T1, typename T2>
          void my_test(T1 t1, T2 t2) {
            ASSERT_GT(t1, t2);
          }
      };

     TEST(gt_int_4_int_3, parameter_base)
     {
        my_test(4, 3);
     }

     TEST(gt_double_pi_int_3, parameter_base)
     {
        my_test(3.141592, 3);
     }

4. Q: Why isn't <my-favourite-os> supported?
   A: Because I don't have it. If you want support you can contribute your own
      solution. If it fits nicely I'll accept it. If I don't accept it, you
      still have your solution, and you're of course free to fork the project.
      An alternative way is of course to donate the necessary system to me,
      and encourage me to spend the time on it. ;-)

5. Q: I like google-mock, can I use it with crpcut
   A: If you're daring, yes, maybe. Get the gmock_experimental branch
      from git://github.com/rollbear/crpcut.git and follow the README.
      This is not very carefully tested, and if you run with Unicode
      strings, things *will* break. Some minimalistic tests have worked,
      however, so perhaps there's hope. Please report the results, both
      good and bad.

6. Q: OK, so what is the downside of crpcut?
   A: It requires a bleeding-edge C++ compiler (some of the features required
      aren't even standardized yet,) a highly posix compliant OS, and there's
      no integration with any mock framework.

7. Q: make selftest complains about core files and ulimit, what gives?
   A: The self test includes a number of tests that are assumed to dump
      core. The recommended way to run crpcut tests is to enable core dumps
      in the current working directory. That way the core dumps will be
      saved.
